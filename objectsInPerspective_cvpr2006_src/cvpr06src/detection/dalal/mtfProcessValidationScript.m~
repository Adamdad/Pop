% process mtf validation script

load '/IUS/vmr20/dhoiem/data/valset.mat'
fn = vs.imnames;

folder = '/IUS/vmr20/dhoiem/datasets/valset/images/objectDetection';

bboxrange(1, :) = [0 Inf 0 24]; % [minw maxw minh maxh] car size range
bboxrange(2, :) = [0 Inf 0 96]; % [minw maxw minh maxh] ppl size range

% PEOPLE

for ots = 1:2

    for f = 1:numel(fn)        
        loadName = [folder '/' strtok(fn{f}, '.') '.objdet.' ots '.mat'];
        if exist(loadName)
            tmp = load(loadName);
            objdet = tmp.passeddet;
        
            % scores{nshapes, nscales}
            scores = cell(numel(objdet), size(objdet(1).size, 1));
            for sz = 1:length(objdet)
                for sc = 1:size(objdet(sz).size, 1)                                                
                    scores{sc, sz} = repmat(-Inf, objdet(sz).size(sc, :));                         
                    scores{sc, sz}(objdet(sz).ind{sc}) = objdet(sz).scores{sc};
                end              
            end
        end
        sparam = 0.89;
        objsize = reshape([objdet(:).objsize], 2, numel(objdet))'; 
        valdet{f} = scores2detections(scores, objsize, sparam, ...
            'minscore', -2, 'maxdets', 1000);  
    end

    for f = 1:numel(valdet)
        conf{f} = valdet{f}(:, 1);
        bbox{f} = valdet{f}(:, 2:5);
    end
    det = output2det(conf, bbox, [1:numel(valdet)]');
    det2 = detPruneDetections(det, 0.33, -Inf);    
    det2 = detSplitDetectionsBySizes(det2, bboxrange(ots, :));
    
    gt = detSplitGroundTruthByObjects(vs.gtruth, ots);
    gt = detSplitGroundTruthBySizes(gt, bboxrange(ots, :));

    roc(ots) = detRoc(gt, det2);
    
% read detections from files and put in order of ground truth
fn = '/IUS/vmr20/dhoiem/datasets/dalal/OLT/valresults/out.txt';
listfn = '/IUS/vmr20/dhoiem/datasets/dalal/OLT/vallist.txt';
[valdet, vallist] = dalalOutput2Detections(fn, listfn, [16 16]);
[valdet, vallist] = detCombineDetections(cell(size(vs.imnames)), vs.imnames, valdet, vallist);

% convert detection format to standard used by pruning and roc functions
for f = 1:numel(valdet)
    conf{f} = valdet{f}(:, 1);
    bbox{f} = valdet{f}(:, 2:5);
end
det = output2det(conf, bbox, [1:numel(valdet)]');
det2 = detPruneDetections(det, 0.33, -Inf);

% convert ground truth so that each cell contains ground truth for only one
% object type and compute roc
gt = detSplitGroundTruthByObjects(vs.gtruth, 2);
rocppl = detRoc(gt, det2);

% find probabilistic output parameters
tp = [0 ; rocppl.tp];
tp = tp(2:end)>tp(1:end-1);
[pplA, pplB, err] = getProbabilisticOutputParams(rocppl.conf, tp)

%disp('not processing cars')


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% CARS

% read detections from files and put in order of ground truth
fn = '/IUS/vmr20/dhoiem/datasets/dalal/cars/OLT/valresults/out.txt';
listfn = '/IUS/vmr20/dhoiem/datasets/dalal/cars/OLT/vallist.txt';
[valdet, vallist] = dalalOutput2Detections(fn, listfn, [16 16]);
[valdet, vallist] = detCombineDetections(cell(size(vs.imnames)), vs.imnames, valdet, vallist);

% convert detection format to standard used by pruning and roc functions
for f = 1:numel(valdet)
    conf{f} = valdet{f}(:, 1);
    bbox{f} = valdet{f}(:, 2:5);
end
det = output2det(conf, bbox, [1:numel(valdet)]');
det2 = detPruneDetections(det, 0.33, -Inf);

% convert ground truth so that each cell contains ground truth for only one
% object type and compute roc
gt = detSplitGroundTruthByObjects(vs.gtruth, 1);
roccar = detRoc(gt, det2);

% find probabilistic output parameters
tp = [0 ; rocppl.tp];
tp = tp(2:end)>tp(1:end-1);
[carA, carB, err] = getProbabilisticOutputParams(rocppl.conf, tp)